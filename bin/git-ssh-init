#!/usr/bin/env ruby

begin
  require 'git-ssh'
rescue LoadError 
  path = File.expand_path(File.join(File.dirname(__FILE__),"..","lib"))
  raise if $:.include?(path)
  $: << path
  retry
end

require 'fileutils'
require 'stringio'

CONFIG_SAMPLE = <<EOF
[global]
directory = %%DIR%%

[groups]
# devs = bob alice john
# clients = albert britney
admin = %%USER%%

[/]
@admin = c
# @devs = w
# @all =

[/git-ssh-admin]
@admin = w
@all =

# [/users/patrick]
# patrick = c
EOF

options = {}

parser = OptionParser.new do |o|
  o.banner = "Usage: #$0 [options] <pubkey_file>"
  
  o.on('-d', '--directory PATH', 'The diretory to install git-ssh') do |dir|
    options[:directory] = dir
  end
  o.on('-u', '--user USER', 'Default admin user') do |user|
    options[:user] = user
  end
end

pubkey = parser.parse!

if ARGV.size != 1
  puts parser.help
  exit
end

# options[:directory] ||= File.join(Dir.pwd, "git-ssh")
options[:directory] ||= File.expand_path("~/repositories")

pubkey = pubkey.first
pubkey_content = nil

begin
  pubkey_content = File.read(pubkey)
rescue Errno::ENOENT => ex
  puts ex.message
  exit 1
end

def try(prompt)
  print prompt, '... '
  io = StringIO.new
  ret = yield io
  if ret
    puts "ok"
  else
    puts "error"
    puts io.string
    exit 1
  end
  ret
end

full_user = pubkey_content.chomp.split(' ').last
options[:user] ||= full_user.split('@').first

git_path = try("Searching for git") do |out|
  out.puts "Error: Couldn't find a git installation. Am I missing something ?"
  ENV["PATH"].split(':').map do |p|
    "#{p}/git" if File.executable?("#{p}/git")
  end.compact.first
end

try("Verify absence of authorized_keys file") do |out|
  out.puts %[Error: File "~/.ssh/authorized_keys" already exists]
  out.puts "It won't be overwritten"
  !File.exists?(File.expand_path("~/.ssh/authorized_keys"))
end

git_ssh_archive = File.join(options[:directory], 'git-ssh-admin.git')
try("Creating temporary archive") do |out|
  if File.exists? git_ssh_archive
    out.puts "Error: Archive git-ssh-admin.git already exist!"
    next
  end
  dir = File.expand_path("~/git-ssh-tempdir")
  FileUtils.mkdir_p dir
  begin
    FileUtils.mkdir_p File.join(dir, 'keydir', options[:user])
    File.open(File.join(dir, 'git-ssh.conf'), "w") do |f|
      CONFIG_SAMPLE.each_line do |l|
	l.gsub!(/%%(\w+)%%/) do |match|
	  case $1.to_sym
	  when :DIR
	    options[:directory]
	  when :USER
	    options[:user]
	  else match
	  end
	end
	f.puts l
      end
    end
    File.open(File.join(dir, 'keydir', options[:user], "#{full_user}.pub"), 'w') do |f|
      f.write pubkey_content
    end

    Dir.chdir(dir) do
      system 'git init >/dev/null'
      system 'git add . >/dev/null'
      system 'git commit -m "First import" >/dev/null'
    end

    FileUtils.mkdir_p options[:directory]
    system "git clone --bare '#{dir}' '#{git_ssh_archive}' > /dev/null"
  ensure
    FileUtils.rm_rf dir
  end
  true
end

try("Adding hook file") do |out|
  post_update_file = File.join(git_ssh_archive, 'hooks', 'post-update')
  File.open post_update_file, 'w' do |f|
    f.write <<EOF
#!/bin/sh
#

git-ssh-hook

EOF
  end
  FileUtils.chmod 0755, post_update_file
end

try("Running hook for the first time") do |out|
  hook = GitSsh::Hook.new git_ssh_archive
  hook.run
  true
end
