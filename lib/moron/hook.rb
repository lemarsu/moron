module Moron
  class Hook
    KEY_PREFIX = %[command="%b %u -r %d",no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty]
    def initialize(path, binary_path)
      @path = path
      @binary_path = binary_path
    end

    def run
      if !@path.match(/\.git$/)
	puts "Is this a git repository ?"
	exit 1
      end
      require 'git'
      g = Git.bare(@path)
      t = g.gtree('HEAD^{tree}')
      t = t.subtrees["keydir"]
      File.open File.expand_path("~/.ssh/authorized_keys"), 'w' do |f|
	write_keys(t, f)
      end
    end

    private

    def moron_path
      File.expand_path(File.join(@binary_path, '/../moron'))
    end

    def key_prefix(user)
      KEY_PREFIX.
	gsub('%u', user).
	gsub('%d', File.dirname(@path)).
	gsub('%b', moron_path)
    end

    def write_keys(tree, f)
      f.puts "# DO NOT EDIT! File autogenerated by moron"
      each_key(tree) do |user, content|
	f.puts [key_prefix(user), content] * ' '
      end
    end

    def each_key(tree)
      tree.subtrees.keys.sort.each do |user|
	tree.subtrees[user].blobs.each do |name, blob|
	  next unless name.match(/\.pub$/)
	  yield user, blob.contents
	end
      end
    end

  end
end
